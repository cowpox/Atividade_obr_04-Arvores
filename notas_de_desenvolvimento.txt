01) Plano de implementação das funções: das mais básicas para as mais avançadas
    Buscar (buscar)
    Inserir (inserir)
    Remover uma ocorrência (removerUmaOcorrencia)
    Remover todas as ocorrências (removerTodasOcorrencias)
    Percursos (exibirInOrder)
    Contar nós (contarNos)
    Contar total de elementos (contarTotalElementos)
    k-ésimo menor (kEsimoMenor)
    Imprimir intervalo (imprimirIntervalo)
    LCA (lowestCommonAncestor)

02) Função buscar:
    retorna: o nó do valor ou NULL (caso não exista)
    lógica: vamos utilizar a recursiva
        raiz == NULL, retorna NULL
        valor == raiz->chave, retorna raiz
        valor < raiz->chave, busca sub-árvore esquerda
        valor > raiz->chave, busca sub-árvore direita
    teste:
        1 - erro (não localizou o 5)
        2 - funcionando (OK)


03) Função inserir:
    retorna: ponteiro de nó
    lógica: recursiva
        raiz == NULL, cria novo nó e retorna
        senão:
            valor < raiz->chave, insira na subárvore esquerda
            valor > raiz->chave, insira na subárvore direita
            valor == raiz->chave, incrementa contador e não cria nono nó
        retorna a nova raiz (importante para recursão)
    teste:
        1 - ainda sem conseguir avaliar
        2 - funcionando (OK)

04) Revisar a função inicializar
    recebe: ponteiro de ponteiro
    retorna: void
    lógica: permite modificar a variável raiz diretamente no main
        define a raiz como NULL (árvore vazia)
    teste: realizado com sucesso (OK)

05) Revisar a função criarNo
    recebe: valor
    retorna: ponteiro para o novo nó
    lógica: 
        aloca memória para novo nó
        preenche: chave (com valor), contador com 1, esq e dir com NULL
    teste: realizado com sucesso (OK)

06) Modificar a inserção de valores no main (atribuir a um ponteiro)
falta fazer a revisão!!!
Revisado => ok

07) Função removerUmaOcorrencia
    recebe: ponteiro para raiz e o valor a ser removido
    retorna: ponteiro da raiz (pois pode ser diferente)
    lógica: remove apenas 1 cópia do valor
        busca o nó que contenha o valor (durante o percurso da excludência)
        se não encontrado, não faz nada (retorna a raiz)
        se encontrado e contador maior que 1 => só decrementa o contador em 1
        se encontrado e contador == 1 => faz a remoção tradicional
    obs: não há necessidade de usar a função buscar, para não percorrer a árvore 2 x
    teste:
        1 - ainda não realizado
        2 - funcionando (OK)

08) Implementar a função exibirInOrder (para poder testar as funções de remoção)
    recebe: ponteiro para a raiz
    exibe: os elementos da árvore em ordem crescente
    retorna: void
    lógica: recursiva
        visita subárvore esquerda
        imprime nó
        visita subárvore direita
    teste: exibiu em ordem crescente. Funcionando (OK)

09) Realizar testes com as funções já implementadas
    realizados os testes. Todas as funções implementadas até aqui estão funcionando

10) Função removerTodasOcorrencias
    recebe: ponteiro para raiz e o valor a ser removido
    retorna: ponteiro da raiz (que pode ser diferente)
    lógica: remove completamente o nó, independente do contador
        busca o nó que contenha o valor (durante o percurso da excludência)
        se não encontrado, não faz nada (retorna a raiz)
        se encontrado => faz a remoção tradicional
    teste: funcionando (OK)

11) Função contarNos
    recebe: ponteiro para a raiz
    retorna: inteiro com o número de nós
    lógica: retorna o número de nós distintos
        se raiz == NULL, retorna 0
        se não: 1 + contarNos Esq + contarNos dir
    teste: funcionando (OK)    

12) Função contarTotalElementos
    recebe: ponteiro para raiz
    retorna: inteiro com a soma dos contadores de cada nó
    lógica: retorna soma de ocorrência dos nós
        se raiz == NULL, retorna 0
        se não, raiz->contador + contarTotal esq + contarTotal dir
    teste: funcionando (OK)

13) Função kEsimoMenor
    recebe: ponteiro para raiz e inteiro k
    retorna: inteiro com a chave do k-ésimo menor elemento (incluindo frequencias)
    lógica: utilizar uma função auxiliar (kEsimoMenorAux)
        Percorremos a árvore in-order, mantendo uma variável passada por referência para contar os elementos.
        Se k for menor que o número de elementos na subárvore esquerda, chamamos a recursão na esquerda.
        Se k cair dentro do contador do nó atual, esse nó é o k-ésimo menor.
        Se k ainda não foi atingido, subtraímos os elementos contados e chamamos a recursão na direita.
        Se k for maior que o total de elementos da árvore, retornamos -1 (valor não encontrado).
    teste: funcionando (OK)

14) Função imprimirIntervalo
    recebe: ponteiro para raiz, inteiro mínimo e inteiro máximo
    retorna: void
    exibe: todas as chaves [min, max], considerando cada cópia
    lógica:
        se raiz == NULL, não faz nada
        se raiz->chave < min, só busca à direita
        se raiz->chave > max, só busca à esquerda
        se não => imprime raiz->chave contador vezes e chamada esq e dir
    teste: funcionando (OK)

15) Função lowestCommonAncestor
    recebe: ponteiro de raiz e dois inteiros (chaves)
    retorna: ponteiro para o menor nó ancestral comum
    lógica: recursiva
        se raiz == NULL, retorna NULL
        se os valores forem menores que a raiz, o LCA está na esquerda
        se os valores forem maiores que a raiz, o LCA está na direita
        caso contrário, raiz é o LCA (desde que os valores existam)
    teste:
        1) LCA(16,18): diferente do esperado (entretanto a estrutura da árvore não corresponde
            ao que está no comentário: o elemento 16 deveria ser filho do 18, não do 12)
        2) LCA(5,18): diferente do esperado. Deve estar ocorrendo mudança da árvore na remoção anterior.
        vamos criar uma função para visualizar a árvore (exibirArvore)
        3) após visualizar a estrutura da árvore => refeito o esperado => funcionando (OK)

16) Função exibirArvore
    recebe: ponteiro de raiz
    exibe: mostra os elementos da árvore no formato raiz - subárvore esq - subárvore dir
    retorna: void
    lógica: recursiva
        imprime a raiz
        imprime "("
        imprime arv esq
        imprime arv dir
        imprime ")"
    teste: funcionando (OK)
    refeitos testes da LCA (meus resultados estavam corretos)

17) Função exibirPreOrder:
    recebe: ponteiro de raiz
    exibe: imprime os elementos em pré-ordem (raiz -> esq -> dir)
    retorna: void
    lógica: recursiva
        imprime o nó atual
        visita subárvore esq
        visita subárvore dir
        imprimir cada chave múltiplas vezes (de acordo com o contador)
    teste: funcionando (OK)

18) Função exibirPostOrder:
    recebe: ponteiro de raiz
    exibe: imprime os elementos em pós-ordem (esq -> dir -> raiz)
    retorna: void
    lógica: recursiva
        visita subárvore esq
        visita subárvore dir
        visita o nó atual e imprime
        imprimir cada chave múltiplas vezes (de acordo com o contador)
    teste: funcionando (OK)






